// Code generated by MockGen. DO NOT EDIT.
// Source: container/initchain.go
//
// Generated by this command:
//
//	mockgen -source=container/initchain.go -destination=mocks/mock_initchain.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	container "github.com/mikeyfennelly1/mrun/container"
	specs_go "github.com/opencontainers/runtime-spec/specs-go"
	gomock "go.uber.org/mock/gomock"
)

// MockChainLink is a mock of ChainLink interface.
type MockChainLink struct {
	ctrl     *gomock.Controller
	recorder *MockChainLinkMockRecorder
	isgomock struct{}
}

// MockChainLinkMockRecorder is the mock recorder for MockChainLink.
type MockChainLinkMockRecorder struct {
	mock *MockChainLink
}

// NewMockChainLink creates a new mock instance.
func NewMockChainLink(ctrl *gomock.Controller) *MockChainLink {
	mock := &MockChainLink{ctrl: ctrl}
	mock.recorder = &MockChainLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainLink) EXPECT() *MockChainLinkMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockChainLink) Execute(spec *specs_go.Spec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockChainLinkMockRecorder) Execute(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockChainLink)(nil).Execute), spec)
}

// SetNext mocks base method.
func (m *MockChainLink) SetNext(next container.ChainLink) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNext", next)
}

// SetNext indicates an expected call of SetNext.
func (mr *MockChainLinkMockRecorder) SetNext(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNext", reflect.TypeOf((*MockChainLink)(nil).SetNext), next)
}
